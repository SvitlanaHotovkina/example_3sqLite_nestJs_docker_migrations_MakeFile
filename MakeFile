# Variables
PROJECT_NAME = my-nest-project
DOCKER_COMPOSE = docker-compose
DOCKER = docker

# Creates a new NestJS project
setup:
	npx @nestjs/cli new $(PROJECT_NAME) --package-manager npm
	cd $(PROJECT_NAME) && npm install @nestjs/typeorm typeorm sqlite3 dotenv

# Creates the basic project structure
init-structure:
	mkdir -p $(PROJECT_NAME)/db
	mkdir -p $(PROJECT_NAME)/src/entities
	mkdir -p $(PROJECT_NAME)/src/migrations/primary
	mkdir -p $(PROJECT_NAME)/src/migrations/secondary
	mkdir -p $(PROJECT_NAME)/src/migrations/logs
	cd $(PROJECT_NAME) && npx @nestjs/cli generate module user
	cd $(PROJECT_NAME) && npx @nestjs/cli generate module logs

# Creates the ORM configuration
create-ormconfig:
	echo 'import { DataSource } from "typeorm";' > $(PROJECT_NAME)/ormconfig.ts
	echo 'import { User } from "./src/entities/user.entity";' >> $(PROJECT_NAME)/ormconfig.ts
	echo 'import { Logs } from "./src/entities/logs.entity";' >> $(PROJECT_NAME)/ormconfig.ts
	echo 'export const AppDataSourcePrimary = new DataSource({' >> $(PROJECT_NAME)/ormconfig.ts
	echo '  type: "sqlite",' >> $(PROJECT_NAME)/ormconfig.ts
	echo '  database: "db/main.sqlite",' >> $(PROJECT_NAME)/ormconfig.ts
	echo '  entities: [User],' >> $(PROJECT_NAME)/ormconfig.ts
	echo '  migrations: ["src/migrations/primary/*.ts"],' >> $(PROJECT_NAME)/ormconfig.ts
	echo '  synchronize: false,' >> $(PROJECT_NAME)/ormconfig.ts
	echo '  name: "primary",' >> $(PROJECT_NAME)/ormconfig.ts
	echo '});' >> $(PROJECT_NAME)/ormconfig.ts

# Creates `Dockerfile`
create-dockerfile:
	echo 'FROM node:20' > $(PROJECT_NAME)/Dockerfile
	echo 'WORKDIR /app' >> $(PROJECT_NAME)/Dockerfile
	echo 'COPY package*.json ./' >> $(PROJECT_NAME)/Dockerfile
	echo 'RUN npm install' >> $(PROJECT_NAME)/Dockerfile
	echo 'COPY . .' >> $(PROJECT_NAME)/Dockerfile
	echo 'RUN mkdir -p db' >> $(PROJECT_NAME)/Dockerfile
	echo 'EXPOSE 3000' >> $(PROJECT_NAME)/Dockerfile
	echo 'CMD npm run build && npm run typeorm migration:run -d ormconfig.ts --name primary && npm start' >> $(PROJECT_NAME)/Dockerfile

# Creates `docker-compose.yml`
create-docker-compose:
	echo 'version: "3.8"' > $(PROJECT_NAME)/docker-compose.yml
	echo 'services:' >> $(PROJECT_NAME)/docker-compose.yml
	echo '  app:' >> $(PROJECT_NAME)/docker-compose.yml
	echo '    container_name: nest-app' >> $(PROJECT_NAME)/docker-compose.yml
	echo '    build: .' >> $(PROJECT_NAME)/docker-compose.yml
	echo '    restart: unless-stopped' >> $(PROJECT_NAME)/docker-compose.yml
	echo '    ports:' >> $(PROJECT_NAME)/docker-compose.yml
	echo '      - "3000:3000"' >> $(PROJECT_NAME)/docker-compose.yml
	echo '    volumes:' >> $(PROJECT_NAME)/docker-compose.yml
	echo '      - ./db:/app/db' >> $(PROJECT_NAME)/docker-compose.yml
	echo '      - .:/app' >> $(PROJECT_NAME)/docker-compose.yml
	echo '    environment:' >> $(PROJECT_NAME)/docker-compose.yml
	echo '      NODE_ENV: production' >> $(PROJECT_NAME)/docker-compose.yml
	echo '    command: npm run start' >> $(PROJECT_NAME)/docker-compose.yml

# Runs all initialization commands
init: setup init-structure create-ormconfig create-dockerfile create-docker-compose

# Starts the application in Docker
start:
	cd $(PROJECT_NAME) && $(DOCKER_COMPOSE) up --build -d

# Stops the container
stop:
	cd $(PROJECT_NAME) && $(DOCKER_COMPOSE) down

# Runs database migrations
migrate:
	cd $(PROJECT_NAME) && $(DOCKER) exec nest-app npm run typeorm migration:run -d ormconfig.ts --name primary
	cd $(PROJECT_NAME) && $(DOCKER) exec nest-app npm run typeorm migration:run -d ormconfig.ts --name secondary
	cd $(PROJECT_NAME) && $(DOCKER) exec nest-app npm run typeorm migration:run -d ormconfig.ts --name logs

# Reverts the last migration
migrate-revert:
	cd $(PROJECT_NAME) && $(DOCKER) exec nest-app npm run typeorm migration:revert -d ormconfig.ts --name primary
	cd $(PROJECT_NAME) && $(DOCKER) exec nest-app npm run typeorm migration:revert -d ormconfig.ts --name secondary
	cd $(PROJECT_NAME) && $(DOCKER) exec nest-app npm run typeorm migration:revert -d ormconfig.ts --name logs

# Cleans up cache
clean:
	rm -rf $(PROJECT_NAME)/node_modules $(PROJECT_NAME)/dist

# Reinstalls dependencies from scratch
reinstall:
	rm -rf $(PROJECT_NAME)/node_modules $(PROJECT_NAME)/package-lock.json
	cd $(PROJECT_NAME) && npm install

# Shows logs from the container
logs:
	cd $(PROJECT_NAME) && $(DOCKER_COMPOSE) logs -f

# Displays available commands
help:
	@echo "Available commands:"
	@echo "  make init             - Create project and structure"
	@echo "  make start            - Start the Docker container"
	@echo "  make stop             - Stop the Docker container"
	@echo "  make migrate          - Run database migrations"
	@echo "  make migrate-revert   - Revert the last migration"
	@echo "  make clean            - Clear NestJS cache"
	@echo "  make reinstall        - Reinstall dependencies"
	@echo "  make logs             - View container logs"
